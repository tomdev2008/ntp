package cn.me.xdf.action.base;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import javax.servlet.http.HttpServletRequest;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import cn.me.xdf.common.hibernate4.Finder;import cn.me.xdf.common.page.Pagination;import cn.me.xdf.service.AccountService;import cn.me.xdf.service.UserDictionService;import cn.me.xdf.service.UserRoleService;import cn.me.xdf.service.base.DictionService;import cn.me.xdf.model.base.Diction;import cn.me.xdf.model.organization.RoleEnum;import cn.me.xdf.model.organization.SysOrgPerson;import cn.me.xdf.model.organization.UserRole;/** * 用户角色设置 *  * @author xiaobin */@Controller@RequestMapping(value = "/admin/role")public class RoleController {	@Autowired	private UserRoleService userRoleService;	@Autowired	private AccountService accountService;	@Autowired	private DictionService dictionService;	@Autowired	private UserDictionService userDictionService;	@RequestMapping(value = "list", method = RequestMethod.GET)	// @RequiresRoles({"admin"})	public String list(Model model, String pageNo, HttpServletRequest request) {		model.addAttribute("active", "role");		if (StringUtils.isBlank(pageNo)) {			pageNo = String.valueOf(1);		}		Finder finder = Finder.create("from UserRole");		String fdType = request.getParameter("fdType");		if (StringUtils.isNotBlank(fdType)) {			finder.append("where roleEnum=:role").setParam("role",					RoleEnum.valueOf(fdType));		}		finder.append("order by roleEnum ASC,fdId ASC");		Pagination page = userRoleService.getPage(finder,				Integer.parseInt(pageNo));		// 处理角色有，组织架构无此人(admin除外)		List<UserRole> delList = new ArrayList<UserRole>();		for (Object obj : page.getList()) {			UserRole ur = (UserRole) obj;			String personId = ur.getSysOrgPerson().getFdId();			if (!"1183b0b84ee4f581bba001c47a78b2d9".equals(personId)) {				SysOrgPerson sop = accountService.findById(personId);				if (sop == null) {					delList.add(ur);					userRoleService.deleteEntity(ur);				}			}		}		page.getList().removeAll(delList);		model.addAttribute("page", page);		model.addAttribute("fdType", fdType);		return "/admin/role/list";	}	@RequestMapping(value = "add")	public String add(Model model) {		List<Diction> projects = dictionService.findProject();		model.addAttribute("projects", projects);		return "/admin/role/add";	}	@RequestMapping(value = "edit/{id}")	public String edit(Model model, @PathVariable("id") String id) {		UserRole userRole = userRoleService.load(id);		model.addAttribute("bean", userRole);		List<Diction> projects = dictionService.findProject();		model.addAttribute("projects", projects);		List<String> userDictionIds = userDictionService.getDictionIdByUser(userRole.getSysOrgPerson().getFdId());		//model.addAttribute("userDictionIds", userDictionIds);		for (Diction diction : projects) {			for (String string : userDictionIds) {				if(diction.getFdId().equals(string)){					diction.setHasChecked(true);				}			}		}		return "/admin/role/edit";	}	@RequestMapping(value = "save", method = RequestMethod.POST)	public String save(RedirectAttributes redirectAttributes,			HttpServletRequest request) {		String personId = request.getParameter("personId");		String[] projectIds = request.getParameterValues("project");		if (projectIds != null) {			userDictionService.saveUserDiction(					accountService.findById(personId),					Arrays.asList(projectIds));		}		String fdType = request.getParameter("fdType");		userRoleService.addUserRole(personId, fdType);		return "redirect:/admin/role/list";	}	@RequestMapping(value = "delete/{id}")	public String deleteById(RedirectAttributes redirectAttributes,			@PathVariable("id") String id) {		userRoleService.deleteUserRole(id);		return "redirect:/admin/role/list";	}	@RequestMapping(value = "delAll")	public String delAll(RedirectAttributes redirectAttributes,			HttpServletRequest request) {		String[] ids = request.getParameterValues("ids");		userRoleService.delete(ids);		return "redirect:/admin/role/list";	}}