package cn.me.xdf.action.base;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import jodd.util.StringUtil;import org.apache.commons.lang3.ArrayUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import cn.me.xdf.common.hibernate4.Finder;import cn.me.xdf.common.json.JsonUtils;import cn.me.xdf.common.page.Pagination;import cn.me.xdf.service.AccountService;import cn.me.xdf.service.UserDictionService;import cn.me.xdf.service.UserRoleService;import cn.me.xdf.service.base.DictionService;import cn.me.xdf.model.base.Diction;import cn.me.xdf.model.organization.RoleEnum;import cn.me.xdf.model.organization.SysOrgPerson;import cn.me.xdf.model.organization.UserRole;/** * 用户角色设置 *  * @author xiaobin */@Controller@RequestMapping(value = "/admin/role")public class RoleController {	@Autowired	private UserRoleService userRoleService;	@Autowired	private AccountService accountService;	@Autowired	private DictionService dictionService;	@RequestMapping(value = "list", method = RequestMethod.GET)	// @RequiresRoles({"admin"})	public String list(Model model, String pageNo, HttpServletRequest request) {		model.addAttribute("active", "role");		if (StringUtils.isBlank(pageNo)) {			pageNo = String.valueOf(1);		}		Finder finder = Finder.create("from UserRole r where (r.sysOrgPerson.loginName <> 'admin' or r.sysOrgPerson.loginName is null) ");		String fdType = request.getParameter("fdType");		if (StringUtils.isNotBlank(fdType)) {			finder.append(" and roleEnum=:role").setParam("role",					RoleEnum.valueOf(fdType));		}		String param = request.getParameter("fdKey");		if (StringUtils.isNotBlank(param)) {			finder.append(" and (lower(r.sysOrgPerson.loginName) like :param  or lower(r.sysOrgPerson.fdName) like :param or lower(r.sysOrgPerson.hbmParent.fdName) like :param ) ").setParam("param",					"%"+param+"%");		}		finder.append("order by roleEnum ASC,fdId ASC");		Pagination page = userRoleService.getPage(finder,				Integer.parseInt(pageNo));		// 处理角色有，组织架构无此人(admin除外)		List<UserRole> delList = new ArrayList<UserRole>();		for (Object obj : page.getList()) {			UserRole ur = (UserRole) obj;			String personId = ur.getSysOrgPerson().getFdId();			if (!"1183b0b84ee4f581bba001c47a78b2d9".equals(personId)) {				SysOrgPerson sop = accountService.findById(personId);				if (sop == null) {					delList.add(ur);					userRoleService.deleteEntity(ur);				}			}		}		page.getList().removeAll(delList);		model.addAttribute("page", page);		model.addAttribute("fdType", fdType);		model.addAttribute("fdKey", param);		return "/admin/role/list";	}	@RequestMapping(value = "add")	public String add(Model model) {		model.addAttribute("active", "role");		return "/admin/role/add";	}	@RequestMapping(value = "edit/{id}")	public String edit(Model model, @PathVariable("id") String id) {		model.addAttribute("active", "role");		UserRole userRole = userRoleService.load(id);		model.addAttribute("bean", userRole);		return "/admin/role/edit";	}	@RequestMapping(value = "save", method = RequestMethod.POST)	public String save(RedirectAttributes redirectAttributes,			HttpServletRequest request) {		String personId = request.getParameter("personId");		String fdType = request.getParameter("fdType");		userRoleService.addUserRole(personId, fdType);		return "redirect:/admin/role/list";	}	@RequestMapping(value = "delete/{id}")	public String deleteById(RedirectAttributes redirectAttributes,			@PathVariable("id") String id) {		userRoleService.deleteUserRole(id);		return "redirect:/admin/role/list";	}	@RequestMapping(value = "delAll")	public String delAll(RedirectAttributes redirectAttributes,			HttpServletRequest request) {		String[] ids = request.getParameterValues("ids");		userRoleService.delete(ids);		return "redirect:/admin/role/list";	}		@RequestMapping(value = "deleteRole")	public String deleteRole(Model model, HttpServletRequest request) {		String[] ids = request.getParameterValues("ids");		String param = request.getParameter("fdKey");		String fdType = request.getParameter("fdType");		String selectAll = request.getParameter("selectAll");		if(StringUtils.isBlank(selectAll) && ArrayUtils.isNotEmpty(ids)){			userRoleService.delete(ids);		}else if(StringUtils.isNotBlank(selectAll)){			StringBuffer sql = new StringBuffer(" delete sys_user_role r  ");			sql.append(" where r.person_id in ( select p1.fdid from sys_org_person p1 where p1.fd_login_Name <> ? or p1.fd_login_Name is null)  ");						if (StringUtils.isNotBlank(fdType)) {				sql.append(" and r.person_role='"+fdType+"' ");			}			if (StringUtils.isNotBlank(param)) {				sql.append(" and (");				sql.append(" r.person_id in ( select p.fdid from sys_org_person p where lower(p.FD_LOGIN_NAME) like '%"+param+"%' )  ");				sql.append(" or r.person_id in (select e.fdid ");				sql.append(" from sys_org_element e ");				sql.append(" where e.fd_name like ");				sql.append(" '%"+param+"%') or r.person_id in (select tem.fdid ");				sql.append(" from sys_org_element tem ");				sql.append(" where tem.fd_parentid in ");				sql.append(" (select e1.fdid ");				sql.append("  from sys_org_element e1 ");				sql.append("  where e1.fd_name like '%"+param+"%'))) ");			}			userRoleService.executeSql(sql.toString(), "admin");		}		model.addAttribute("fdKey", param);		model.addAttribute("fdType", fdType);		return "redirect:/admin/role/list";	}		@RequestMapping(value = "saveRoles")	@ResponseBody	public String saveRoles(HttpServletRequest request) {		String id = request.getParameter("fdId");		if(StringUtils.isNotBlank(id)){			userRoleService.deleteUserRole(id);		}		String roleName = request.getParameter("roleName");		if(StringUtils.isNotBlank(roleName)){			String kingUser = request.getParameter("kingUser");			if (StringUtil.isNotBlank(kingUser)) {				List<Map> list = JsonUtils.readObjectByJson(kingUser, List.class);				for (Map map : list) {					String personId =map.get("id").toString();					userRoleService.addUserRole(personId, roleName);				}			}		}		return "";	}}