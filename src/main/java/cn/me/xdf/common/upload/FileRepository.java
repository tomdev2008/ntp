package cn.me.xdf.common.upload;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Locale;import java.util.ResourceBundle;import javax.servlet.ServletContext;import org.apache.commons.io.FileUtils;import org.apache.commons.io.FilenameUtils;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.context.ServletContextAware;import org.springframework.web.multipart.MultipartFile;import cn.me.xdf.common.utils.ResourceBundleReader;import cn.me.xdf.common.utils.excel.PPTtoImageUtils;import cn.me.xdf.common.web.Constants;/** * 本地文件存储 * * @author xiaobin */public class FileRepository implements ServletContextAware {    private Logger log = LoggerFactory.getLogger(FileRepository.class);    public List<FileModel> storeByPpt(MultipartFile file, String folderType) {        List<FileModel> lists = new ArrayList<FileModel>();        String origName = file.getOriginalFilename();        //String contentType = file.getContentType();        String ext = FilenameUtils.getExtension(origName).toLowerCase(                Locale.ENGLISH);        if ("ppt".equals(ext)) {// ppt            FileModel model = storeByExt(file, StoreType.SYSTEM.getName());            return PPTtoImageUtils.doPPTtoImage(new File(model.getFilePath()),                    ctx, Constants.UPLOAD_PATH);        } else {            FileModel model = storeByExt(file, folderType);            lists.add(model);        }        return lists;    }    public FileModel storeByExt(MultipartFile file) {        return storeByExt(file, StoreType.SYSTEM.getName());    }    /**     * 文件存储     *     * @param file     * @param folderType     * @return     */    public FileModel storeByExt(MultipartFile file, String folderType) {        FileModel fileModel = new FileModel();        String origName = file.getOriginalFilename();        String contentType = file.getContentType();        String ext = FilenameUtils.getExtension(origName).toLowerCase(                Locale.ENGLISH);        try {            String fileUrl;            if (StoreType.FOLDER.getName().equals(folderType)) { // 返回项目的相对路径                fileUrl = storeByExtFolder(Constants.UPLOAD_PATH, ext, file);                fileModel.setStoreType(StoreType.FOLDER);            } else { // 返回项目的绝对路径                fileUrl = storeByExt(Constants.UPLOAD_PATH, ext, file);                fileModel.setStoreType(StoreType.SYSTEM);            }            fileModel.setContentType(contentType);            fileModel.setExt(ext);            fileModel.setFileName(origName);// 文件名称(带文件扩展名)            fileModel.setFilePath(fileUrl);            fileModel.setFileSize(file.getSize());            return fileModel;        } catch (Exception ex) {            throw new RuntimeException(ex);        }    }    public String storeByExt(String path, String ext, MultipartFile file)            throws IOException {        String filename = UploadUtils.generateFilename(path, ext);        ResourceBundle bundle = ResourceBundleReader.getBundle();        String destPath = bundle.getString("upload_path");        File dest = new File(destPath + filename);        dest = UploadUtils.getUniqueFile(dest);        store(file, dest);        return dest.getAbsolutePath();    }    public String storeByExtFolder(String path, String ext, MultipartFile file)            throws IOException {        String filename = UploadUtils.generateFilename(path, ext);        File dest = new File(ctx.getRealPath(filename));        dest = UploadUtils.getUniqueFile(dest);        store(file, dest);        return filename;    }    public String storeByFilename(String filename, MultipartFile file)            throws IOException {        File dest = new File(ctx.getRealPath(filename));        store(file, dest);        return filename;    }    public String storeByExt(String path, String ext, File file)            throws IOException {        String filename = UploadUtils.generateFilename(path, ext);        File dest = new File(ctx.getRealPath(filename));        dest = UploadUtils.getUniqueFile(dest);        store(file, dest);        return filename;    }    public String storeByFilename(String filename, File file)            throws IOException {        File dest = new File(ctx.getRealPath(filename));        store(file, dest);        return filename;    }    public boolean delete(String filePath) {        if (StringUtils.isBlank(filePath))            return false;        File file = new File(filePath);        if (file.exists())            file.delete();        return true;    }    private void store(MultipartFile file, File dest) throws IOException {        try {            UploadUtils.checkDirAndCreate(dest.getParentFile());            file.transferTo(dest);        } catch (IOException e) {            log.error("Transfer file error when upload file", e);            throw e;        }    }    private void store(File file, File dest) throws IOException {        try {            UploadUtils.checkDirAndCreate(dest.getParentFile());            FileUtils.copyFile(file, dest);        } catch (IOException e) {            log.error("Transfer file error when upload file", e);            throw e;        }    }    public File retrieve(String name) {        return new File(ctx.getRealPath(name));    }    private ServletContext ctx;    public void setServletContext(ServletContext servletContext) {        this.ctx = servletContext;    }}