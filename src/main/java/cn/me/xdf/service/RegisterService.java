package cn.me.xdf.service;import java.awt.image.BufferedImage;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.IOException;import java.net.URL;import java.sql.Timestamp;import java.util.Date;import java.util.List;import cn.me.xdf.webservice.client.ad.ADApi;import cn.me.xdf.webservice.client.ad.ADApiSoap;import cn.me.xdf.webservice.client.ad.ExtensionDataObject;import cn.me.xdf.webservice.client.ad.UserInfo;import org.apache.shiro.SecurityUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import cn.me.xdf.common.hibernate4.Finder;import cn.me.xdf.common.page.Pagination;import cn.me.xdf.common.utils.Identities;import cn.me.xdf.model.organization.RoleEnum;import cn.me.xdf.model.organization.SysOrgDepart;import cn.me.xdf.model.organization.SysOrgPerson;import cn.me.xdf.model.organization.SysOrgPersonTemp;import cn.me.xdf.service.ShiroDbRealm.ShiroUser;import cn.me.xdf.utils.MD5Util;import javax.imageio.ImageIO;import javax.xml.namespace.QName;@Service@Transactional(readOnly = true)public class RegisterService extends BaseService {    private static final Logger log = LoggerFactory            .getLogger(RegisterService.class);    public static final String DB_SCHEMA = "DB_IXDF";    @Autowired    private SysOrgDepartService SysOrgDepartService;    @Autowired    private UserRoleService userRoleService;    @Autowired    private AccountService accountService;    /**     * 分页查询     *     * @param finder 查询构造器     * @param pageNo 页码     * @return     */    @Transactional(readOnly = true)    public Pagination getPage(Finder finder, Integer pageNo) {        if (pageNo == null)            pageNo = 1;        return getBaseDao().find(finder, pageNo);    }    /**     * 用户注册用户     *     * @param     * @param sysOrgPersonTemp     * @return     */    @Transactional(readOnly = false)    public void registerTemp(SysOrgPersonTemp sysOrgPersonTemp) {        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();        sysOrgPersonTemp.setFdIsEmp("0");// 未入职        sysOrgPersonTemp.setIsRegistered("1");// 是否已注册        sysOrgPersonTemp.setRegisterType("0");// 注册方式        if (user != null)            sysOrgPersonTemp.setRegisterId(user.id);        sysOrgPersonTemp.setRegisterTime(new Timestamp(new Date().getTime()));// 注册时间        save(sysOrgPersonTemp);// 保存本地用户本地临时信息        //addPersonToDBIXDF(sysOrgPersonTemp);// 调用接口远程添加用户    }    /**     * 保存用户临时数据     *     * @param sysOrgPersonTemp     * @return     */    @Transactional(readOnly = false)    public void save(SysOrgPersonTemp sysOrgPersonTemp) {        super.save(sysOrgPersonTemp);    }    /**     * 远程添加用户信息     *     * @param temp     */    private void addPersonToDBIXDF(SysOrgPersonTemp temp) {        SysOrgPerson person = new SysOrgPerson();        person.setFdMobileNo(temp.getFdMobileNo());        person.setFdEmail(temp.getFdEmail());        person.setFdName(temp.getRealName());        person.setDeptId(temp.getDepatId());        person.setLoginName(temp.getFdIdentityCard());        person.setPassword(temp.getFdPassword());        person.setFdIdentityCard(temp.getFdIdentityCard());        person.setFdPhotoUrl(temp.getFdIcoUrl());        String id = addPersonToDBIXDF(person);        // 添加角色        userRoleService.addUserRole(id, RoleEnum.trainee);    }    /**     * 远程添加用户信息     *     * @param sysOrgPerson     * @return     */    private String addPersonToDBIXDF(SysOrgPerson sysOrgPerson) {        String id = Identities.generateID();        // 保存到SYS_ORG_DEPART        StringBuilder sqlElement = new StringBuilder();        sqlElement                .append("INSERT INTO "                        + DB_SCHEMA                        + ".SYS_ORG_DEPART (FD_ID,FD_ORG_TYPE,FD_NAME,FD_PARENTID,FD_IS_AVAILABLE) ");        sqlElement.append("VALUES(?,?,?,?,?)");        getBaseDao().executeSql(sqlElement.toString(), id, 8,                sysOrgPerson.getRealName(), sysOrgPerson.getDeptId(), 1);        //以下是从OTP中迁移过来的方法多一个FD_KEYWORD字段//		sqlElement//		.append("INSERT INTO "//				+ DB_SCHEMA//				+ ".SYS_ORG_DEPART (FD_ID,FD_ORG_TYPE,FD_NAME,FD_PARENTID,FD_IS_AVAILABLE,FD_KEYWORD) ");//		sqlElement.append("VALUES(?,?,?,?,?,?)");//		getBaseDao().executeSql(sqlElement.toString(), id, 8,//				sysOrgPerson.getRealName(), sysOrgPerson.getDeptId(), 1,//				sysOrgPerson.getLoginName());        // 保存到SYS_ORG_PERSON        StringBuilder sqlPerson = new StringBuilder();        sqlPerson                .append("INSERT INTO "                        + DB_SCHEMA                        + ".SYS_ORG_PERSON (FD_ID,FD_MOBILE_NO,FD_EMAIL,FD_LOGIN_NAME,FD_PASSWORD,FD_IDENTITY_CARD,FD_IS_EMP,FD_PHOTO_URL,DEPATID)");        sqlPerson.append("VALUES(?,?,?,?,?,?,?,?,?)");        getBaseDao().executeSql(sqlPerson.toString(), id,                sysOrgPerson.getFdMobileNo(), sysOrgPerson.getFdEmail(),                sysOrgPerson.getLoginName(),                MD5Util.getMD5String(sysOrgPerson.getPassword()),                sysOrgPerson.getFdIdentityCard(), "0",                sysOrgPerson.getFdPhotoUrl(), sysOrgPerson.getDeptId());        return id;    }    /**     * 修改教师其它信息     *     * @param sopt     */    @Transactional(readOnly = false)    public void updateOtherData(SysOrgPersonTemp sopt, String sysId) {        StringBuilder sql = new StringBuilder();        sql.append("UPDATE SYS_ORG_PERSON_TEMP SET depatId=?,");        sql.append("deptName=?,fdBloodType=?,fdBirthDay=?,fdSex=?,realName=?,");        sql.append("FD_MOBILE_NO=?,selfIntroduction=? WHERE FDID=?");        getBaseDao().executeSql(sql.toString(), sopt.getDepatId(), sopt.getDeptName(),                sopt.getFdBloodType(), sopt.getFdBirthDay(), sopt.getFdSex(), sopt.getRealName(),                sopt.getFdMobileNo(), sopt.getSelfIntroduction(), sopt.getFdId());        //updatePersonOtherToDBIXDF(sopt,sysId);    }    @Transactional(readOnly = false)    public void updatePersonData(SysOrgPersonTemp sopt, String sysId) {        updatePersonOtherToDBIXDF(sopt, sysId);// 调用接口远程    }    /**     * 同步修改基本资料到远程     *     * @param sopt     * @param sysId     */    private void updatePersonOtherToDBIXDF(SysOrgPersonTemp sopt, String sysId) {        StringBuilder sqlElement = new StringBuilder();        sqlElement                .append("UPDATE "                        + DB_SCHEMA                        + ".SYS_ORG_DEPART SET FD_NAME=?,FD_PARENTID=? WHERE FD_ID=? ");        getBaseDao().executeSql(sqlElement.toString(), sopt.getRealName(),                sopt.getDepatId(), sysId);        // 保存到SYS_ORG_PERSON        StringBuilder sqlPerson = new StringBuilder();        sqlPerson.append("UPDATE " + DB_SCHEMA                + ".SYS_ORG_PERSON SET ");        sqlPerson.append("FD_SEX=?,FD_MOBILE_NO=? WHERE FD_ID=? ");        getBaseDao().executeSql(sqlPerson.toString(),                sopt.getFdSex(), sopt.getFdMobileNo(), sysId);    }    /**     * 更改个人信息的图片     *     * @param sopt     * @param     */    @Transactional(readOnly = false)    public void updateTeacherPic(SysOrgPersonTemp sopt, String id) {        String sqlTemp = "UPDATE SYS_ORG_PERSON_TEMP SET FDICOURL=? WHERE FDID=?";        getBaseDao().executeSql(sqlTemp.toString(), sopt.getFdIcoUrl(), sopt.getFdId());        //updatePersonToDBIXDF(fdIcoUrl,id);// 调用接口远程    }    /**     * 对外提供方法可以调用接口远程     *     * @param fdFilePath     * @param id     */    @Transactional(readOnly = false)    public void updatePerToDBIXDF(String loginName, String fdFilePath, String id) {        updatePersonToDBIXDF(loginName, fdFilePath, id);// 调用接口远程    }    private void updatePersonToDBIXDF(String loginName, String fdFilePath, String sysId) {        // 保存到SYS_ORG_PERSON        try {            BufferedImage buffed = ImageIO.read(new File(fdFilePath));            ByteArrayOutputStream toByte = new ByteArrayOutputStream();            ImageIO.write(buffed, "jpg", toByte);            byte[] bytes = toByte.toByteArray();            final QName SERVICE_NAME = new QName("http://tempuri.org/", "ADApi");            URL wsdlURL = ADApi.WSDL_LOCATION;            ADApi ss = new ADApi(wsdlURL, SERVICE_NAME);            ADApiSoap port = ss.getADApiSoap12();            StringBuilder sign = new StringBuilder();            UserInfo user = new UserInfo();            ExtensionDataObject _getUserThumbnailphoto_userInfoExtensionData = new ExtensionDataObject();            user.setExtensionData(_getUserThumbnailphoto_userInfoExtensionData);            user.setAccountID(loginName);            user.setSystemTag("KM");            user.setCompany("");            user.setDepartment("");            user.setInBeijing(1);            user.setLevel(0);            user.setExtensionData(_getUserThumbnailphoto_userInfoExtensionData);            user.setName("");            user.setPWD("");            user.setThumbnailphoto(bytes);            user.setTelphonenumber("");            user.setTitle("");            sign.append("accountid=").append(user.getAccountID());            sign.append("&company=").append(user.getCompany());            sign.append("&department=").append(user.getDepartment());            sign.append("&inbeijing=").append(user.getInBeijing());            sign.append("&level=").append(user.getLevel());            sign.append("&name=").append(user.getName());            sign.append("&pwd=").append(user.getPWD());            sign.append("&securitykey=neworiental.123456");            sign.append("&systemtag=").append("KM");            sign.append("&telphonenumber=").append(user.getTelphonenumber());            sign.append("&thumbnailphoto=").append(MD5Util.getMD5String(bytes));            sign.append("&title=").append(user.getTitle());            user.setSign(MD5Util.getMD5String(sign.toString()));            cn.me.xdf.webservice.client.ad.StateInfo stateInfo = port.updateUserthumbnailphoto(user);            int state = stateInfo.getState();            String errorMsg = stateInfo.getErrMessage();            log.info("state===" + state);            if (state != 1) {                log.error("errorMsg===" + errorMsg);                throw new RuntimeException("修改头像出现错误，信息：" + errorMsg);            }        } catch (IOException e) {            log.error("修改人员头像出现错误：" + e.getMessage());            throw new RuntimeException(e);        }    }    /**     * 修改密码     *     * @param fdId     * @param fdPwd     */    @Transactional(readOnly = false)    public void updateTeacherPwd(String fdId, String fdPwd, String sysId) {        if (fdId != null && !fdId.equals("")) {            String sqlTemp = "UPDATE SYS_ORG_PERSON_TEMP SET FDPASSWORD=? WHERE FDID=?";            getBaseDao().executeSql(sqlTemp, fdPwd, fdId);        }        //updatePwdToDBIXDF(fdPwd,sysId);    }    /**     * 同步临时用户密码     *     * @param pwd     * @param sysId     */    @Transactional(readOnly = false)    private void updatePwdToDBIXDF(String pwd, String sysId) {        // 保存到SYS_ORG_PERSON        StringBuilder sqlPerson = new StringBuilder();        sqlPerson.append("UPDATE " + DB_SCHEMA                + ".SYS_ORG_PERSON SET FD_PASSWORD=? WHERE FD_ID=?");        getBaseDao().executeSql(sqlPerson.toString(), MD5Util.getMD5String(pwd), sysId);    }    /**     * 验证身份证     *     * @param str     * @return     */    @SuppressWarnings("unchecked")    public int checkIdentityCard(String str) {        Finder finder = Finder                .create("from SysOrgPerson p where p.fdIdentityCard = :str");        finder.setParam("str", str);        List<SysOrgPersonTemp> list = find(finder);        if (list == null) {            return 0;        }        return list.size();    }    /**     * 验证     *     * @param str     * @return     */    @SuppressWarnings("unchecked")    public int checkIdentitymail(String str) {        Finder finder = Finder                .create("from SysOrgPerson p where p.fdEmail = :str");        finder.setParam("str", str);        List<SysOrgPersonTemp> list = find(finder);        if (list == null) {            return 0;        }        return list.size();    }    @Transactional(readOnly = false)    public List<SysOrgDepart> getDepartsByParent(String id) {        return SysOrgDepartService.findByProperty("hbmParent.fdId", id);    }    @Override    public <T> Class<T> getEntityClass() {        // TODO Auto-generated method stub        return null;    }}