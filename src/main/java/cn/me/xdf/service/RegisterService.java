package cn.me.xdf.service;import java.sql.Timestamp;import java.util.Date;import java.util.List;import org.apache.shiro.SecurityUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import cn.me.xdf.common.hibernate4.Finder;import cn.me.xdf.common.page.Pagination;import cn.me.xdf.common.utils.Identities;import cn.me.xdf.common.utils.MyBeanUtils;import cn.me.xdf.common.utils.security.Md5PasswordEncoder;import cn.me.xdf.common.utils.security.PasswordEncoder;import cn.me.xdf.model.base.NotifyEntity;import cn.me.xdf.model.organization.RoleEnum;import cn.me.xdf.model.organization.SysOrgElement;import cn.me.xdf.model.organization.SysOrgPerson;import cn.me.xdf.model.organization.SysOrgPersonTemp;import cn.me.xdf.service.ShiroDbRealm.ShiroUser;import cn.me.xdf.utils.MD5Util;@Service@Transactional(readOnly = true)public class RegisterService extends BaseService {	private static final Logger log = LoggerFactory			.getLogger(RegisterService.class);	public static final String DB_SCHEMA = "DB_IXDF";	@Autowired	private SysOrgElementService sysOrgElementService;		@Autowired	private UserRoleService userRoleService;	@Autowired	private AccountService accountService;	/**	 * 分页查询	 * 	 * @param finder	 *            查询构造器	 * @param pageNo	 *            页码	 * @return	 */	@Transactional(readOnly = true)	public Pagination getPage(Finder finder, Integer pageNo) {		if (pageNo == null)			pageNo = 1;		return getBaseDao().find(finder, pageNo);	}		/**	 * 用户注册用户	 * 	 * @param sysOrgPerson	 * @param sysOrgPersonTemp	 * @return	 */	@Transactional(readOnly = false)	public void registerTemp(SysOrgPersonTemp sysOrgPersonTemp) {		ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();		sysOrgPersonTemp.setFdIsEmp("0");// 未入职		sysOrgPersonTemp.setIsRegistered("1");// 是否已注册		sysOrgPersonTemp.setRegisterType("0");// 管理员注册方式		if (user != null)			sysOrgPersonTemp.setRegisterId(user.id);		sysOrgPersonTemp.setRegisterTime(new Timestamp(new Date().getTime()));// 注册时间		save(sysOrgPersonTemp);// 保存本地用户本地临时信息		//addPersonToDBIXDF(sysOrgPersonTemp);// 调用接口远程添加用户	}	/**	 * 保存用户临时数据	 * 	 * @param sysOrgPersonTemp	 * @return	 */	@Transactional(readOnly = false)	public void save(SysOrgPersonTemp sysOrgPersonTemp) {		super.save(sysOrgPersonTemp);	}	/**	 * 根据id删除临时用户	 * @param id	 */	@Transactional(readOnly = false)	public void deleteById(String id) {		SysOrgPersonTemp temp = load(SysOrgPersonTemp.class, id);		SysOrgPerson person = null;		List<SysOrgPerson> persons = findByProperty(SysOrgPerson.class,				"loginName", temp.getFdIdentityCard());		// SysOrgPerson person = findUniqueByProperty(SysOrgPerson.class,		// Value.eq("loginName", temp.getFdIdentityCard()));		if (persons != null) {			person = persons.get(0);			getBaseDao()					.executeSql(							"delete from " + DB_SCHEMA									+ ".SYS_ORG_PERSON where FD_ID=?",							person.getFdId());			getBaseDao().executeSql(					"delete from " + DB_SCHEMA							+ ".SYS_ORG_ELEMENT where FD_ID=?",					person.getFdId());		}		delete(SysOrgPersonTemp.class, id);	}	/**	 * 管理员直接注册用户	 * 	 * @param sysOrgPerson	 * @param fdIcoUrl	 * @return	 */	@Transactional(readOnly = false)	public void register(SysOrgPerson sysOrgPerson, String fdIcoUrl) {		sysOrgPerson.setFdPhotoUrl(fdIcoUrl);		sysOrgPerson.setLoginName(sysOrgPerson.getFdIdentityCard());// 身份证号码为登录名		ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();		SysOrgPersonTemp sysOrgPersonTemp = new SysOrgPersonTemp();		MyBeanUtils.copyProperties(sysOrgPerson, sysOrgPersonTemp);		sysOrgPersonTemp.setRegisterType("0");// 管理员添加方式		sysOrgPersonTemp.setFdIsEmp("0");// 是否入职		sysOrgPersonTemp.setIsRegistered("1");// 是否已注册		sysOrgPersonTemp.setRegisterTime(new Timestamp(new Date().getTime()));// 注册时间		sysOrgPersonTemp.setRegisterId(user.id);// 注册发起人		sysOrgPersonTemp.setFdIcoUrl(fdIcoUrl);// 头像		sysOrgPersonTemp.setDepatId(sysOrgPerson.getDeptId());		save(sysOrgPersonTemp);// 保存本地用户本地临时信息		addPersonToDBIXDF(sysOrgPerson);// 调用接口远程添加用户	}		/**	 * 发送邮件	 * 	 * @param sysOrgPersonTemp	 * @return	 */	@Transactional(readOnly = false)	public void sendMail(SysOrgPersonTemp sysOrgPersonTemp) {		ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();		sysOrgPersonTemp.setRegisterType("1");// 邮件注册方式		sysOrgPersonTemp.setSenderId(user.id);// 邮件发送者		sysOrgPersonTemp.setFdIsEmp("0");// 是否入职		sysOrgPersonTemp.setIsRegistered("0");// 是否已注册		sysOrgPersonTemp.setRegisterId(user.id);// 注册发起人		sysOrgPersonTemp.setRandomCode(Identities.uuid());// 随机码		sysOrgPersonTemp.setSendMailTime(new Timestamp(new Date().getTime()));// 邮件发送时间		save(sysOrgPersonTemp);// 保存本地用户本地临时信息		//sendMailToPerson(sysOrgPersonTemp);// 保存邮件待办	}			/**	 * 同步临时用户密码	 * @param pwd	 * @param sysId	 */	private void updatePwdToDBIXDF(String pwd, String sysId){		// 保存到SYS_ORG_PERSON		StringBuilder sqlPerson = new StringBuilder();		sqlPerson.append("UPDATE " + DB_SCHEMA						+ ".SYS_ORG_PERSON SET FD_PASSWORD=? WHERE FD_ID=?");		getBaseDao().executeSql(sqlPerson.toString(), MD5Util.getMD5String(pwd), sysId);	}	private void updatePersonToDBIXDF(String fdIcoUrl, String sysId) {		// 保存到SYS_ORG_PERSON		StringBuilder sqlPerson = new StringBuilder();		sqlPerson.append("UPDATE " + DB_SCHEMA				+ ".SYS_ORG_PERSON SET FD_PHOTO_URL=? WHERE FD_ID=?");		getBaseDao().executeSql(sqlPerson.toString(), fdIcoUrl, sysId);	}	private String addPersonToDBIXDF(SysOrgPerson sysOrgPerson) {		String id = Identities.generateID();		// 保存到SYS_ORG_ELEMENT		StringBuilder sqlElement = new StringBuilder();		sqlElement				.append("INSERT INTO "						+ DB_SCHEMA						+ ".SYS_ORG_ELEMENT (FD_ID,FD_ORG_TYPE,FD_NAME,FD_PARENTID,FD_IS_AVAILABLE,FD_KEYWORD) ");		sqlElement.append("VALUES(?,?,?,?,?,?)");		getBaseDao().executeSql(sqlElement.toString(), id, 8,				sysOrgPerson.getRealName(), sysOrgPerson.getDeptId(), 1,				sysOrgPerson.getLoginName());			// 保存到SYS_ORG_PERSON		StringBuilder sqlPerson = new StringBuilder();		sqlPerson				.append("INSERT INTO "						+ DB_SCHEMA						+ ".SYS_ORG_PERSON (FD_ID,FD_MOBILE_NO,FD_EMAIL,FD_LOGIN_NAME,FD_PASSWORD,FD_IDENTITY_CARD,FD_IS_EMP,FD_PHOTO_URL)");		sqlPerson.append("VALUES(?,?,?,?,?,?,?,?)");				getBaseDao().executeSql(sqlPerson.toString(), id,				sysOrgPerson.getFdMobileNo(), sysOrgPerson.getFdEmail(),				sysOrgPerson.getLoginName(),				MD5Util.getMD5String(sysOrgPerson.getPassword()),				sysOrgPerson.getFdIdentityCard(), "0",				sysOrgPerson.getFdPhotoUrl());		return id;	}//	/**//	 * 调用添加用户接口//	 * //	 * @param sysOrgPerson//	 * @return//	 *///	@SuppressWarnings("unused")//	private void addPerson(SysOrgPerson sysOrgPerson) {//		try {//			com.landray.kmss.xdf.webservice.SysOrgUser sysOrgUser = new com.landray.kmss.xdf.webservice.SysOrgUser();//			log.info("sysOrgPerson.getDepatId()====" + sysOrgPerson.getDeptId());//			sysOrgUser.setDeptId(sysOrgPerson.getDeptId());//			sysOrgUser.setFdIsEmp(sysOrgPerson.getFdIsEmp());//			sysOrgUser.setLoginName(sysOrgPerson.getLoginName());//			sysOrgUser.setMail(sysOrgPerson.getFdEmail());//			sysOrgUser.setName(sysOrgPerson.getRealName());//			sysOrgUser.setPwd(sysOrgPerson.getPassword());//			sysOrgUser.setSfz(sysOrgPerson.getFdIdentityCard());//			sysOrgUser.setTel(sysOrgPerson.getFdMobileNo());//			sysOrgUser.setTitle("教师");//			sysOrgUser.setPotoImg(null);// 暂时传null//			sysOrgUser.setFdUrl(sysOrgPerson.getFdPhotoUrl());////			// sysOrgUser.setCompanyId("");// 可以不填//			// toAdTdsWebService.addPerson(sysOrgUser);////			int status = ToAdTdsUtils.addPerson(sysOrgUser);//			log.info("调用远程接口返回状态：" + status);//		} catch (Exception ex) {//			log.info("调用远程接口注册用户失败：" + sysOrgPerson.getLoginName());//			throw new RuntimeException(ex);//		}//	}//	@Autowired//	private JavaMailSenderImpl mailSender;////	/**//	 * 发送邮件//	 * //	 * @param sysOrgPersonTemp//	 * @return//	 *///	public void sendMailToPerson(SysOrgPersonTemp sysOrgPersonTemp) {//		ResourceBundle bundle = ResourceBundleReader.getBundle();//		String registerUrl = bundle.getString("register.url")//				+ sysOrgPersonTemp.getRandomCode();//		String mailTitle = bundle.getString("register.mail.title");////		// 邮件内容//		String mailContent = "<BODY style=\"MARGIN: 10px\"><DIV>{0}，您好：</DIV><DIV style=\"TEXT-INDENT: 2em\">您收到的此邮件是由OTP系统发送的注册邀请邮件，请<A href=\"{1}\">点击此处</A>进行注册。</DIV><DIV style=\"TEXT-INDENT: 2em\">如果您并非{2}，请忽略本邮件。</DIV></BODY>";////		// 发送者//		ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();//		SysOrgPerson sysOrgPerson = get(SysOrgPerson.class, user.id);////		NotifyMailExcute notifyMailExcute = new NotifyMailExcute();//		notifyMailExcute.setMailSender(mailSender);////		String toEmail = sysOrgPersonTemp.getFdEmail();//		String fromEmail = sysOrgPerson.getFdEmail();//		String title = mailTitle;//		String content = MessageFormat.format(mailContent,//				sysOrgPersonTemp.getRealName(), registerUrl,//				sysOrgPersonTemp.getRealName());////		notifyMailExcute.excute(toEmail, fromEmail, title, content);// 发送邮件////		log.info("发送注册待办，邮件地址：" + toEmail + "；注册地址：" + registerUrl);//	}	/**	 * 验证身份证	 * 	 * @param str	 * @return	 */	@SuppressWarnings("unchecked")	public int checkIdentityCard(String str) {		Finder finder = Finder				.create("from SysOrgPerson p where p.fdIdentityCard = :str");		finder.setParam("str", str);		List<SysOrgPersonTemp> list = find(finder);		if (list == null) {			return 0;		}		return list.size();	}	/**	 * 验证	 * @param str	 * @return	 */	@SuppressWarnings("unchecked")	public int checkIdentitymail(String str) {		Finder finder = Finder				.create("from SysOrgPerson p where p.notifyEntity.fdEmail = :str");		finder.setParam("str", str);		List<SysOrgPersonTemp> list = find(finder);		if (list == null) {			return 0;		}		return list.size();	}			/**	 * 验证输入的原始密码	 * @param str	 * @return	 */	public boolean checkOldPwd(String userPwd,String oldpwd){		PasswordEncoder encoder = new Md5PasswordEncoder();		String encoderPwd = encoder.encodePassword(oldpwd, null);		if(userPwd.equals(encoderPwd)){			return true;		} else {		    return false;		}	}	/**	 * 修改密码	 * @param fdId	 * @param fdPwd	 */	@Transactional(readOnly = false)	public void updateTeacherPwd(String fdId,String fdPwd, String sysId){		if(fdId != null && !fdId.equals("")){			String sqlTemp = "UPDATE SYS_ORG_PERSON_TEMP SET FDPASSWORD=? WHERE FDID=?";			getBaseDao().executeSql(sqlTemp, fdPwd, fdId);		}		updatePwdToDBIXDF(fdPwd,sysId);	}	@Override	public <T> Class<T> getEntityClass() {		// TODO Auto-generated method stub		return null;	}		@Transactional(readOnly = false)	public List<SysOrgElement> getDepartsByParent(String id) {		return sysOrgElementService.findByProperty("hbmParent.fdId", id);	}}