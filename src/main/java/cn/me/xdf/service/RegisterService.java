package cn.me.xdf.service;import java.sql.Timestamp;import java.text.MessageFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.ResourceBundle;import org.apache.shiro.SecurityUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.mail.javamail.JavaMailSenderImpl;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import cn.me.xdf.common.hibernate4.Finder;import cn.me.xdf.common.page.Pagination;import cn.me.xdf.common.utils.Identities;import cn.me.xdf.common.utils.MyBeanUtils;import cn.me.xdf.common.utils.ResourceBundleReader;import cn.me.xdf.common.utils.security.Md5PasswordEncoder;import cn.me.xdf.common.utils.security.PasswordEncoder;import cn.me.xdf.model.base.NotifyEntity;import cn.me.xdf.model.organization.RoleEnum;import cn.me.xdf.model.organization.SysOrgElement;import cn.me.xdf.model.organization.SysOrgPerson;import cn.me.xdf.model.organization.SysOrgPersonTemp;import cn.me.xdf.service.ShiroDbRealm.ShiroUser;import cn.me.xdf.utils.MD5Util;@Service@Transactional(readOnly = true)public class RegisterService extends BaseService {	private static final Logger log = LoggerFactory			.getLogger(RegisterService.class);	public static final String DB_SCHEMA = "DB_IXDF";	@Autowired	private SysOrgElementService sysOrgElementService;		@Autowired	private UserRoleService userRoleService;	@Autowired	private AccountService accountService;	/**	 * 分页查询	 * 	 * @param finder	 *            查询构造器	 * @param pageNo	 *            页码	 * @return	 */	@Transactional(readOnly = true)	public Pagination getPage(Finder finder, Integer pageNo) {		if (pageNo == null)			pageNo = 1;		return getBaseDao().find(finder, pageNo);	}		/**	 * 用户注册用户	 * 	 * @param sysOrgPerson	 * @param sysOrgPersonTemp	 * @return	 */	@Transactional(readOnly = false)	public void registerTemp(SysOrgPersonTemp sysOrgPersonTemp) {		ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();		sysOrgPersonTemp.setFdIsEmp("0");// 未入职		sysOrgPersonTemp.setIsRegistered("1");// 是否已注册		sysOrgPersonTemp.setRegisterType("0");// 注册方式		if (user != null)			sysOrgPersonTemp.setRegisterId(user.id);		sysOrgPersonTemp.setRegisterTime(new Timestamp(new Date().getTime()));// 注册时间		save(sysOrgPersonTemp);// 保存本地用户本地临时信息		addPersonToDBIXDF(sysOrgPersonTemp);// 调用接口远程添加用户	}	/**	 * 保存用户临时数据	 * 	 * @param sysOrgPersonTemp	 * @return	 */	@Transactional(readOnly = false)	public void save(SysOrgPersonTemp sysOrgPersonTemp) {		super.save(sysOrgPersonTemp);	}	/**	 * 远程添加用户信息	 * @param temp	 */	private void addPersonToDBIXDF(SysOrgPersonTemp temp) {		SysOrgPerson person = new SysOrgPerson();		NotifyEntity notify = new NotifyEntity(temp.getFdMobileNo(),				temp.getFdEmail(), temp.getRealName());		person.setNotifyEntity(notify);		person.setDeptId(temp.getDepatId());		person.setLoginName(temp.getFdIdentityCard());		person.setPassword(temp.getFdPassword());		person.setFdIdentityCard(temp.getFdIdentityCard());		person.setFdPhotoUrl(temp.getFdIcoUrl());		String id = addPersonToDBIXDF(person);		// 添加角色		userRoleService.addUserRole(id, RoleEnum.trainee);	}	/**	 * 远程添加用户信息	 * @param sysOrgPerson	 * @return	 */	private String addPersonToDBIXDF(SysOrgPerson sysOrgPerson) {		String id = Identities.generateID();		// 保存到SYS_ORG_ELEMENT		StringBuilder sqlElement = new StringBuilder();		sqlElement				.append("INSERT INTO "						+ DB_SCHEMA						+ ".SYS_ORG_ELEMENT (FD_ID,FD_ORG_TYPE,FD_NAME,FD_PARENTID,FD_IS_AVAILABLE,FD_KEYWORD) ");		sqlElement.append("VALUES(?,?,?,?,?,?)");		getBaseDao().executeSql(sqlElement.toString(), id, 8,				sysOrgPerson.getRealName(), sysOrgPerson.getDeptId(), 1,				sysOrgPerson.getLoginName());			// 保存到SYS_ORG_PERSON		StringBuilder sqlPerson = new StringBuilder();		sqlPerson				.append("INSERT INTO "						+ DB_SCHEMA						+ ".SYS_ORG_PERSON (FD_ID,FD_MOBILE_NO,FD_EMAIL,FD_LOGIN_NAME,FD_PASSWORD,FD_IDENTITY_CARD,FD_IS_EMP,FD_PHOTO_URL)");		sqlPerson.append("VALUES(?,?,?,?,?,?,?,?)");				getBaseDao().executeSql(sqlPerson.toString(), id,				sysOrgPerson.getFdMobileNo(), sysOrgPerson.getFdEmail(),				sysOrgPerson.getLoginName(),				MD5Util.getMD5String(sysOrgPerson.getPassword()),				sysOrgPerson.getFdIdentityCard(), "0",				sysOrgPerson.getFdPhotoUrl());		return id;	}	/**	 * 根据id删除临时用户	 * @param id	 */	@Transactional(readOnly = false)	public void deleteById(String id) {		SysOrgPersonTemp temp = load(SysOrgPersonTemp.class, id);		SysOrgPerson person = null;		List<SysOrgPerson> persons = findByProperty(SysOrgPerson.class,				"loginName", temp.getFdIdentityCard());		if (persons != null) {			person = persons.get(0);			getBaseDao()					.executeSql(							"delete from " + DB_SCHEMA									+ ".SYS_ORG_PERSON where FD_ID=?",							person.getFdId());			getBaseDao().executeSql(					"delete from " + DB_SCHEMA							+ ".SYS_ORG_ELEMENT where FD_ID=?",					person.getFdId());		}		delete(SysOrgPersonTemp.class, id);	}		/**	 * 验证身份证	 * 	 * @param str	 * @return	 */	@SuppressWarnings("unchecked")	public int checkIdentityCard(String str) {		Finder finder = Finder				.create("from SysOrgPerson p where p.fdIdentityCard = :str");		finder.setParam("str", str);		List<SysOrgPersonTemp> list = find(finder);		if (list == null) {			return 0;		}		return list.size();	}	/**	 * 验证	 * @param str	 * @return	 */	@SuppressWarnings("unchecked")	public int checkIdentitymail(String str) {		Finder finder = Finder				.create("from SysOrgPerson p where p.notifyEntity.fdEmail = :str");		finder.setParam("str", str);		List<SysOrgPersonTemp> list = find(finder);		if (list == null) {			return 0;		}		return list.size();	}			/**	 * 验证输入的原始密码	 * @param str	 * @return	 */	public boolean checkOldPwd(String userPwd,String oldpwd){		PasswordEncoder encoder = new Md5PasswordEncoder();		String encoderPwd = encoder.encodePassword(oldpwd, null);		if(userPwd.equals(encoderPwd)){			return true;		} else {		    return false;		}	}		@Transactional(readOnly = false)	public List<SysOrgElement> getDepartsByParent(String id) {		return sysOrgElementService.findByProperty("hbmParent.fdId", id);	}	@Override	public <T> Class<T> getEntityClass() {		// TODO Auto-generated method stub		return null;	}}