package cn.me.xdf.service;import java.util.List;import cn.me.xdf.common.hibernate4.Value;import cn.me.xdf.model.organization.RoleEnum;import cn.me.xdf.model.organization.SysOrgPerson;import cn.me.xdf.model.organization.UserRole;import cn.me.xdf.utils.ShiroUtils;import org.apache.commons.lang3.ArrayUtils;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.cache.Cache;import org.apache.shiro.cache.CacheManager;import org.apache.shiro.subject.SimplePrincipalCollection;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;@Service@Transactional(readOnly = true)public class UserRoleService extends BaseService {	/**	 * 获取用户的角色	 * 	 * @param uid	 * @return	 */	public List<UserRole> findUserRoles(String uid) {		return findByProperty("sysOrgPerson.fdId", uid);	}	/**	 * 添加用户对应的角色	 * 	 * @param uid	 * @param roleEnum	 */	@Transactional(readOnly = false)	public UserRole addUserRole(String uid, String roleEnum) {		if (StringUtils.isBlank(roleEnum)) {			throw new RuntimeException("用户对应的角色不能为空!");		}		clearRoleCache(uid);		return addUserRole(uid, RoleEnum.valueOf(roleEnum));	}	@Transactional(readOnly = false)	public UserRole addUserRole(String uid, RoleEnum roleEnum) {		if (StringUtils.isBlank(uid)) {			throw new RuntimeException("用户Id不能为空!");		}		List<UserRole> userRoles = findByCriteria(UserRole.class,				Value.eq("sysOrgPerson.fdId", uid),				Value.eq("roleEnum", roleEnum));		// List<UserRole> userRoles = findByProperty("sysOrgPerson.fdId", uid);//		for (UserRole role : userRoles) {//			deleteEntity(role);//		}		if(userRoles!=null && userRoles.size()>0){			return userRoles.get(0);		}		SysOrgPerson person = load(SysOrgPerson.class, uid);		UserRole role = new UserRole(person, roleEnum);		return super.save(role);	}	@Transactional(readOnly = false)	public void deleteUserRole(String roleId) {		UserRole userRole = get(roleId);		deleteEntity(userRole);	}	/**	 * 判断角色是否存在	 * 	 * @param uid	 * @return role	 */	public Boolean isEmptyPerson(String uid, RoleEnum roleEnum) {		List<UserRole> lists = findByCriteria(UserRole.class,				Value.eq("sysOrgPerson.fdId", uid),				Value.eq("roleEnum", roleEnum));		return CollectionUtils.isEmpty(lists);	}	@SuppressWarnings("unchecked")	@Override	public Class<UserRole> getEntityClass() {		return UserRole.class;	}	@Autowired	private CacheManager shiroEhcacheManager;	public void clearRoleCache(String uid) {		if (StringUtils.isBlank(uid)) {			return;		}		if (!uid.equals(ShiroUtils.getUser().getId())) {			return;		}		Cache<Object, AuthorizationInfo> cache = shiroEhcacheManager				.getCache(ShiroDbRealm.SHIRO_CACHE_NAME);		SimplePrincipalCollection principals = (SimplePrincipalCollection) ShiroUtils				.getPrincipal();		// cache instance will be non-null if caching is enabled:		if (cache != null) {			cache.remove(principals);		}	}}