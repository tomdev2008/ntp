package cn.me.xdf.service;import javax.annotation.PostConstruct;import org.apache.commons.lang3.builder.EqualsBuilder;import org.apache.commons.lang3.builder.HashCodeBuilder;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.apache.shiro.subject.SimplePrincipalCollection;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import cn.me.xdf.common.utils.security.Md5CredentialsMatcher;import cn.me.xdf.model.organization.SysOrgPerson;import cn.me.xdf.sso.ILoginService;import cn.me.xdf.utils.MD5Util;import cn.me.xdf.utils.ShiroUtils;public class ShiroDbRealm extends AuthorizingRealm {	public static final String SHIRO_CACHE_NAME = "cn.me.xdf.service.ShiroDbRealm.authorizationCache";	private static final Logger log = LoggerFactory			.getLogger(ShiroDbRealm.class);	/**	 * 是否开启E2认证	 */	private static final boolean IS_OPEN_E2 = false;	protected AccountService accountService;	protected ILoginService ssoLoginService;	private String getPassword(char[] array) {		if (array == null)			return "null";		StringBuilder sb = new StringBuilder();		for (int i = 0; i < array.length; i++) {			sb.append(array[i]);		}		return sb.toString();	}	/**	 * 认证回调函数,登录时调用.	 */	@Override	protected AuthenticationInfo doGetAuthenticationInfo(			AuthenticationToken authcToken) throws AuthenticationException {		UsernamePasswordToken token = (UsernamePasswordToken) authcToken;		if (IS_OPEN_E2 && !(ShiroUtils.checkUserName(token.getUsername()))) {			return doE2Login(token);		}		return doDbLogin(token);	}	private AuthenticationInfo doDbLogin(UsernamePasswordToken token) {		try {			SysOrgPerson user = accountService.findUserByLoginName(token					.getUsername());			if (user == null)				return null;			return new SimpleAuthenticationInfo(new ShiroUser(user.getFdId(),					token.getUsername(), user.getRealName()),					user.getPassword(), null, getName());		} catch (Exception ex) {			throw new AuthenticationException(ex);		}	}	private AuthenticationInfo doE2Login(UsernamePasswordToken token) {		try {			// String uname = ComUtils.getLoginNameByEmail();			SysOrgPerson user = accountService.findUserByLoginName(token					.getUsername());			if (user == null)				return null;			if ("0".equals(user.getFdIsEmp())					|| user.getLoginName().equals("admin")) {// 未入职员工				return new SimpleAuthenticationInfo(new ShiroUser(						user.getFdId(), user.getLoginName(),						user.getRealName(), user.getPoto()),						user.getPassword(), null, getName());			}			// 正式员工			String password = getPassword(token.getPassword());			boolean isSuccess = ssoLoginService.login(token.getUsername(),					password);			if (!isSuccess) {				log.info("E2登录不成功");				return null;			}			return new SimpleAuthenticationInfo(new ShiroUser(user.getFdId(),					user.getLoginName(), user.getRealName(), user.getPoto()),					MD5Util.getMD5String(password), null, getName());		} catch (Exception ex) {			throw new AuthenticationException(ex);		}	}	/**	 * 授权查询回调函数, 进行鉴权但缓存中无用户的授权信息时调用.	 */	@Override	protected AuthorizationInfo doGetAuthorizationInfo(			PrincipalCollection principals) {		ShiroUser shiroUser = (ShiroUser) principals.getPrimaryPrincipal();		// String uname = ComUtils.getLoginNameByEmail(shiroUser.loginName);		SysOrgPerson user = accountService				.findUserByLoginName(shiroUser.loginName);		SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();		info.addRoles(user.getRoleList());		return info;	}	/**	 * 更新用户授权信息缓存.	 */	public void clearCachedAuthorizationInfo(String principal) {		SimplePrincipalCollection principals = new SimplePrincipalCollection(				principal, getName());		clearCachedAuthorizationInfo(principals);	}	/**	 * 设定Password校验的Md5算法	 */	@PostConstruct	public void initCredentialsMatcher() {		Md5CredentialsMatcher matcher = new Md5CredentialsMatcher();		setCredentialsMatcher(matcher);	}	@Autowired	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}	@Autowired	public void setSsoLoginService(ILoginService ssoLoginService) {		this.ssoLoginService = ssoLoginService;	}	/**	 * 自定义Authentication对象，使得Subject除了携带用户的登录名外还可以携带更多信息.	 */	public static class ShiroUser implements AuthenticationToken {		private static final long serialVersionUID = -1373760761780840081L;		public String id;		public String loginName;		public String name;		public String poto;		public ShiroUser(String id, String loginName, String name) {			this.id = id;			this.loginName = loginName;			this.name = name;		}		public ShiroUser(String id, String loginName, String name, String poto) {			this.id = id;			this.loginName = loginName;			this.name = name;			this.poto = poto;		}		public String getId() {			return id;		}		public String getName() {			return name;		}						public String getPoto() {			return poto;		}		/**		 * 本函数输出将作为默认的<shiro:principal/>输出.		 */		@Override		public String toString() {			return name;		}		/**		 * 重载equals,只计算loginName;		 */		@Override		public int hashCode() {			return HashCodeBuilder.reflectionHashCode(this, "loginName");		}		/**		 * 重载equals,只比较loginName		 */		@Override		public boolean equals(Object obj) {			return EqualsBuilder.reflectionEquals(this, obj, "loginName");		}		@Override		public Object getPrincipal() {			return this.loginName;		}		@Override		public Object getCredentials() {			return null;		}	}}