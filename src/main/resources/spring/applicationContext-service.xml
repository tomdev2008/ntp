<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="true">


    <bean id="bamMaterialService" class="cn.me.xdf.service.bam.BamMaterialService">
        <property name="sourceMap">
            <map>
                <entry key="materialAttmainService">
                    <ref bean="materialAttmainService"></ref>
                </entry>
                <entry key="materialQuestionsService">
                    <ref bean="materialQuestionsService"></ref>
                </entry>
                <entry key="materialTaskService">
                    <ref bean="materialTaskService"></ref>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="10"/>
        <property name="maxPoolSize" value="50"/>
        <property name="queueCapacity" value="1000"/>
        <property name="keepAliveSeconds" value="300"/>
        <property name="rejectedExecutionHandler">
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>

    <!-- 以annotation方式配置Aop -->

    <!--
    <bean id="accessArgAspect" class="cn.me.xdf.service.bam.aspect.SourceAspect"/>
    <aop:config proxy-target-class="false">
        <aop:aspect order="2" id="aspect" ref="accessArgAspect">
            <aop:after method="saveBamScore"
                       pointcut="execution(* cn.me.xdf.service.bam.process.SourceNodeService.saveSourceNode(..))"/>
        </aop:aspect>
    </aop:config>
    -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <bean id="accessArgAspect" class="cn.me.xdf.aspect.SourceAspect"/>
    <bean id="attMainAspect" class="cn.me.xdf.aspect.AttMainAspect"/>

</beans>
